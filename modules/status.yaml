
sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    name: "${entities_name_prefix}-Status - Warning1"
    id: "${entities_id_prefix}_Status_Warning1"
    register_type: holding
    address: 553
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    name: "${entities_name_prefix}-Status - Warning2"
    id: "${entities_id_prefix}_Status_Warning2"
    register_type: holding
    address: 554
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    name: "${entities_name_prefix}-Status - Error1"
    id: "${entities_id_prefix}_Status_Error1"
    register_type: holding
    address: 555
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    name: "${entities_name_prefix}-Status - Error2"
    id: "${entities_id_prefix}_Status_Error2"
    register_type: holding
    address: 556
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    name: "${entities_name_prefix}-Status - Error3"
    id: "${entities_id_prefix}_Status_Error3"
    register_type: holding
    address: 557
    accuracy_decimals: 0
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    name: "${entities_name_prefix}-Status - Error4"
    id: "${entities_id_prefix}_Status_Error4"
    register_type: holding
    address: 558
    accuracy_decimals: 0
    value_type: U_WORD


  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "${entities_name_prefix}-Status - Failure Status of Communication Board"
    id: "${entities_id_prefix}_Status_Failure_Status_of_Communication_Board"
    register_type: holding
    address: 548
    accuracy_decimals: 0
    value_type: U_WORD


text_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    bitmask: 0
    register_type: holding
    address: 500
    raw_encode: HEXBYTES
    id: "${entities_id_prefix}_Status_Running_Status"
    name: "${entities_name_prefix}-Status - Running Status"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("standby");
        case 1: return std::string("selfcheck");
        case 2: return std::string("normal");
        case 3: return std::string("alarm");
        case 4: return std::string("fault");
        default: return std::string("----");
      }
      return x;

  #new / untested
  - platform: template
    name: "${entities_name_prefix}-Status - Inverter Faults"
    lambda: |-
      static const std::map<int, std::string> faults = {
          {7,  "DC/DC Soft Start Fault"},
          {10, "Auxiliary Power Supply Failure"},
          {13, "Working Mode Change"},
          {18, "AC Over Current"},
          {20, "DC Over Current"},
          {22, "Emergency Stop Fault"},
          {23, "AC Leakage Current or Transient Over Current"},
          {24, "DC Insulation Impedance Failure"},
          {26, "DC Busbar Imbalanced"},
          {29, "Parallel Communication Fault"},
          {35, "No AC Grid"},
          {41, "Parallel System Stop"},
          {42, "AC Line Low Voltage"},
          {46, "Backup Battery Fault"},
          {47, "AC Over Frequency"},
          {48, "AC Lower Frequency"},
          {49, "Backup Battery Fault"},
          {56, "DC Busbar Voltage Low"},
          {58, "BMS Communication Fault"},
          {63, "ARC Fault"},
          {64, "Heat Sink Temperature Failure"},
      };

      std::vector<std::string> errors;
      uint16_t registers[4] = {id(${entities_id_prefix}_Status_Error1).state, id(${entities_id_prefix}_Status_Error1).state, id(${entities_id_prefix}_Status_Error3).state, id(${entities_id_prefix}_Status_Error4).state};
      int offset = 0;

      for (int i = 0; i < 4; i++) {
          for (int bit = 0; bit < 16; bit++) {
              if (registers[i] & (1 << bit)) {
                  int fault_code = offset + bit + 1;
                  if (faults.count(fault_code)) {
                      errors.push_back("F" + std::to_string(fault_code) + " " + faults.at(fault_code));
                  } else {
                      errors.push_back("F" + std::to_string(fault_code));
                  }
              }
          }
          offset += 16;
      }
      std::string result;
      for (size_t i = 0; i < errors.size(); i++) {
          if (i > 0) result += ", ";
          result += errors[i];
      }

      return errors.empty() ? "No Faults" : result;
    update_interval: 10s
