sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 1
    name: "${entities_name_prefix} - Advanced Register 178"
    id: "${entities_id_prefix}_Advanced_Register_178"
    register_type: holding
    value_type: U_WORD
    #internal: true
    address: 178

# !! Must be changed to select !!
# Switch write_lambda will not set the payload using "return" statement (it only accepts true/false values and all numeric != 0 is interpreted as true)
select:
  # It's not fully clear what bit 0 & bit 1 enable or disable
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 10
    name: "${entities_name_prefix}-Advanced - Function Enable" # bit 0 & 1
    id: "${entities_id_prefix}_Advanced_Function_Enable"
    #register_type: holding
    address: 178

    optionsmap:
      "Disabled": 0
      "Enabled": 1

    # Deye Documentation ... TO_BE_COMPLETED
    # bit 0 is variable (0 = disabled , 1 = enabled)
    # bit 1 is fixed = 1 for both disabled and enabled
    # Use bitmask = 0x1

    lambda: |-
      // Convert Register Value to Integer
      uint16_t register_complete = uint16_t(x);

      // Log Whole Modbus Register Contents
      ESP_LOGI("main","Modbus: Register Read - Overall Value = %d",register_complete);

      // Apply bitmask to extract the Value we are Actually Interested in
      uint16_t setting_value = (register_complete & 0x1) >> 0;

      // Log Setting Value
      ESP_LOGI("main","Modbus: Register Decode - Advanced_Function_Enable = %d",setting_value);
      
      
      if (setting_value == 0)
        return  std::string("Disabled");
      if (setting_value == 1)
        return  std::string("Enabled");
      return {};

    write_lambda: |-
      // Convert Select Value to Integer
      uint16_t select_value = uint16_t(value);

      // Debug
      ESP_LOGI("main","Modbus: Write - Advanced_Function_Enable set to %d" , select_value);
  
      // Current Value of the Register (all bits)
      uint16_t current_value = id(${entities_id_prefix}_Advanced_Register_178).state;

      // Debug
      ESP_LOGI("main","Modbus: Write - Previous Register 178 Value (unmodified) = %d", current_value);

      // Declare Variable
      uint16_t write_value = 0;

      // Define new Combined (all bits) value for the Register
      ESP_LOGI("main","Modbus: apply Bitmask on Bit %d" , 1);
      if (select_value == 0) {
          write_value = current_value & ~0x1;  // Set bit 1 to 0
      } else {
          write_value = current_value | 0x1;   // Set bit 1 to 1
      }
    
      // Log Value to be written to the Register
      ESP_LOGI("main", "Modbus: Write - Updated Register 178 Value (write) = %d", write_value);
      
      // Return Result
      return write_value;

    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 10
    name: "${entities_name_prefix}-Advanced - Generator Peak Shaving Enable" # bit 2 & 3
    id: "${entities_id_prefix}_Advanced_Generator_Peak_Shaving_Enable"
    #register_type: holding
    address: 178

    optionsmap:
      "Disabled": 0
      "Enabled": 1

    # Deye Documentation ... TO_BE_COMPLETED
    # bit 2 is variable (0 = disabled , 1 = enabled)
    # bit 3 is fixed = 1 for both disabled and enabled
    # Use bitmask = 0x4

    lambda: |-
      // Convert Register Value to Integer
      uint16_t register_complete = uint16_t(x);

      // Log Whole Modbus Register Contents
      ESP_LOGI("main","Modbus: Register Read - Overall Value = %d",register_complete);

      // Apply bitmask to extract the Value we are Actually Interested in
      uint16_t setting_value = (register_complete & 0x4) >> 2;

      // Log Setting Value
      ESP_LOGI("main","Modbus: Register Decode - Advanced_Generator_Peak_Shaving_Enable = %d",setting_value);
      
      
      if (setting_value == 0)
        return  std::string("Disabled");
      if (setting_value == 1)
        return  std::string("Enabled");
      return {};

    write_lambda: |-
      // Convert Select Value to Integer
      uint16_t select_value = uint16_t(value);

      // Debug
      ESP_LOGI("main","Modbus: Write - Advanced_Generator_Peak_Shaving_Enable set to %d" , select_value);
  
      // Current Value of the Register (all bits)
      uint16_t current_value = id(${entities_id_prefix}_Advanced_Register_178).state;

      // Debug
      ESP_LOGI("main","Modbus: Write - Previous Register 178 Value (unmodified) = %d", current_value);

      // Declare Variable
      uint16_t write_value = 0;

      // Define new Combined (all bits) value for the Register
      ESP_LOGI("main","Modbus: apply Bitmask on Bit %d" , 3);
      if (select_value == 0) {
          write_value = current_value & ~0x4;  // Set bit 3 to 0
      } else {
          write_value = current_value | 0x4;   // Set bit 3 to 1
      }
    
      // Log Value to be written to the Register
      ESP_LOGI("main", "Modbus: Write - Updated Register 178 Value (write) = %d", write_value);
      
      // Return Result
      return write_value;

    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 10
    name: "${entities_name_prefix}-Advanced - Grid Peak Shaving Enable" # bit 4 & 5
    id: "${entities_id_prefix}_Advanced_Grid_Peak_Shaving_Enable"
    #register_type: holding
    address: 178

    optionsmap:
      "Disabled": 0
      "Enabled": 1

    # Deye Documentation ... TO_BE_COMPLETED
    # bit 4 is variable (0 = disabled , 1 = enabled)
    # bit 5 is fixed = 1 for both disabled and enabled
    # Use bitmask = 0x10

    lambda: |-
      // Convert Register Value to Integer
      uint16_t register_complete = uint16_t(x);

      // Log Whole Modbus Register Contents
      ESP_LOGI("main","Modbus: Register Read - Overall Value = %d",register_complete);

      // Apply bitmask to extract the Value we are Actually Interested in
      uint16_t setting_value = (register_complete & 0x10) >> 4;

      // Log Setting Value
      ESP_LOGI("main","Modbus: Register Decode - Advanced_Grid_Peak_Shaving_Enable = %d",setting_value);
      
      
      if (setting_value == 0)
        return  std::string("Disabled");
      //if (setting_value == 1)
      else
        return  std::string("Enabled");
      return {};

    write_lambda: |-
      // Convert Select Value to Integer
      uint16_t select_value = uint16_t(value);

      // Debug
      ESP_LOGI("main","Modbus: Write - Advanced_Grid_Peak_Shaving_Enable set to %d" , select_value);
  
      // Current Value of the Register (all bits)
      uint16_t current_value = id(${entities_id_prefix}_Advanced_Register_178).state;

      // Debug
      ESP_LOGI("main","Modbus: Write - Previous Register 178 Value (unmodified) = %d", current_value);

      // Declare Variable
      uint16_t write_value = 0;

      // Define new Combined (all bits) value for the Register
      ESP_LOGI("main","Modbus: apply Bitmask on Bit %d" , 5);
      if (select_value == 0) {
          write_value = current_value & ~0x10;  // Set bit 5 to 0
      } else {
          write_value = current_value | 0x10;   // Set bit 5 to 1
      }
    
      // Log Value to be written to the Register
      ESP_LOGI("main", "Modbus: Write - Updated Register 178 Value (write) = %d", write_value);
      
      // Return Result
      return write_value;

    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 10
    name: "${entities_name_prefix}-Advanced - On Grid Always On Enable" # bit 6 & 7
    id: "${entities_id_prefix}_Advanced_On_Grid_Always_On_Enable"
    #register_type: holding
    address: 178

    optionsmap:
      "Disabled": 0
      "Enabled": 1

    # Deye Documentation ... TO_BE_COMPLETED
    # bit 6 is variable (0 = disabled , 1 = enabled)
    # bit 7 is fixed = 1 for both disabled and enabled
    # Use bitmask = 0x40

    lambda: |-
      // Convert Register Value to Integer
      uint16_t register_complete = uint16_t(x);

      // Log Whole Modbus Register Contents
      ESP_LOGI("main","Modbus: Register Read - Overall Value = %d",register_complete);

      // Apply bitmask to extract the Value we are Actually Interested in
      uint16_t setting_value = (register_complete & 0x40) >> 6;

      // Log Setting Value
      ESP_LOGI("main","Modbus: Register Decode - Advanced_On_Grid_Always_On_Enable = %d",setting_value);
      
      
      if (setting_value == 0)
        return  std::string("Disabled");
      else
      //if (setting_value == 1)
        return  std::string("Enabled");
      return {};


    write_lambda: |-
      // Convert Select Value to Integer
      uint16_t select_value = uint16_t(value);

      // Debug
      ESP_LOGI("main","Modbus: Write - Advanced_On_Grid_Always_On_Enable set to %d" , select_value);
  
      // Current Value of the Register (all bits)
      uint16_t current_value = id(${entities_id_prefix}_Advanced_Register_178).state;

      // Debug
      ESP_LOGI("main","Modbus: Write - Previous Register 178 Value (unmodified) = %d", current_value);

      // Declare Variable
      uint16_t write_value = 0;

      // Define new Combined (all bits) value for the Register
      ESP_LOGI("main","Modbus: apply Bitmask on Bit %d" , 7);
      if (select_value == 0) {
          write_value = current_value & ~0x40;  // Set bit 7 to 0
      } else {
          write_value = current_value | 0x40;   // Set bit 7 to 1
      }
    
      // Log Value to be written to the Register
      ESP_LOGI("main", "Modbus: Write - Updated Register 178 Value (write) = %d", write_value);
      
      // Return Result
      return write_value;

    entity_category: config
    icon: "mdi:toggle-switch"
  
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 10
    name: "${entities_name_prefix}-Advanced - External Relay" # bit 8 & 9
    id: "${entities_id_prefix}_Advanced_External_Relay"
    #register_type: holding
    address: 178

    optionsmap:
      "Disabled": 0
      "Enabled": 1

    # Deye Documentation ... TO_BE_COMPLETED
    # bit 8 is variable (0 = disabled , 1 = enabled)
    # bit 9 is fixed = 1 for both disabled and enabled
    # Use bitmask = 0x100

    lambda: |-
      // Convert Register Value to Integer
      uint16_t register_complete = uint16_t(x);

      // Log Whole Modbus Register Contents
      ESP_LOGI("main","Modbus: Register Read - Overall Value = %d",register_complete);

      // Apply bitmask to extract the Value we are Actually Interested in
      uint16_t setting_value = (register_complete & 0x100) >> 8;

      // Log Setting Value
      ESP_LOGI("main","Modbus: Register Decode - Advanced_External_Relay = %d",setting_value);
      
      
      if (setting_value == 0)
        return  std::string("Disabled");
      else
      //if (setting_value == 1)
        return  std::string("Enabled");
      return {};

    write_lambda: |-
      // Convert Select Value to Integer
      uint16_t select_value = uint16_t(value);

      // Debug
      ESP_LOGI("main","Modbus: Write - Advanced_External_Relay set to %d" , select_value);
  
      // Current Value of the Register (all bits)
      uint16_t current_value = id(${entities_id_prefix}_Advanced_Register_178).state;

      // Debug
      ESP_LOGI("main","Modbus: Write - Previous Register 178 Value (unmodified) = %d", current_value);

      // Declare Variable
      uint16_t write_value = 0;

      // Define new Combined (all bits) value for the Register
      ESP_LOGI("main","Modbus: apply Bitmask on Bit %d" , 9);
      if (select_value == 0) {
          write_value = current_value & ~0x100;  // Set bit 9 to 0
      } else {
          write_value = current_value | 0x100;   // Set bit 9 to 1
      }
    
      // Log Value to be written to the Register
      ESP_LOGI("main", "Modbus: Write - Updated Register 178 Value (write) = %d", write_value);
      
      // Return Result
      return write_value;

    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 10
    name: "${entities_name_prefix}-Advanced - BMS Err-Stop" # bit 10 & 11
    id: "${entities_id_prefix}_Advanced_BMS_Err_Stop"
    #register_type: holding
    address: 178

    optionsmap:
      "Disabled": 0
      "Enabled": 1

    # Deye Documentation ... TO_BE_COMPLETED
    # bit 10 is variable (0 = disabled , 1 = enabled)
    # bit 11 is fixed = 1 for both disabled and enabled
    # Use bitmask = 0x400

    lambda: |-
      // Convert Register Value to Integer
      uint16_t register_complete = uint16_t(x);

      // Log Whole Modbus Register Contents
      ESP_LOGI("main","Modbus: Register Read - Overall Value = %d",register_complete);

      // Apply bitmask to extract the Value we are Actually Interested in
      uint16_t setting_value = (register_complete & 0x400) >> 10;

      // Log Setting Value
      ESP_LOGI("main","Modbus: Register Decode - Advanced_BMS_Err_Stop = %d",setting_value);
      
      
      if (setting_value == 0)
        return  std::string("Disabled");
      else
      //if (setting_value == 1)
        return  std::string("Enabled");
      return {};

    write_lambda: |-
      // Convert Select Value to Integer
      uint16_t select_value = uint16_t(value);

      // Debug
      ESP_LOGI("main","Modbus: Write - Advanced_BMS_Err_Stop set to %d" , select_value);
  
      // Current Value of the Register (all bits)
      uint16_t current_value = id(${entities_id_prefix}_Advanced_Register_178).state;

      // Debug
      ESP_LOGI("main","Modbus: Write - Previous Register 178 Value (unmodified) = %d", current_value);

      // Declare Variable
      uint16_t write_value = 0;

      // Define new Combined (all bits) value for the Register
      ESP_LOGI("main","Modbus: apply Bitmask on Bit %d" , 11);
      if (select_value == 0) {
          write_value = current_value & ~0x400;  // Set bit 11 to 0
      } else {
          write_value = current_value | 0x400;   // Set bit 11 to 1
      }
    
      // Log Value to be written to the Register
      ESP_LOGI("main", "Modbus: Write - Updated Register 178 Value (write) = %d", write_value);
      
      // Return Result
      return write_value;

    entity_category: config
    icon: "mdi:toggle-switch"


# Notes to be considered to implement multi bit modbus
#https://community.home-assistant.io/t/modbus-register-control-with-3-or-more-values/649266
#https://community.home-assistant.io/t/modbus-two-bit-control-switch/633398
#https://esphome.io/components/switch/modbus_controller.html
#https://esphome.io/components/text_sensor/modbus_controller.html
# Particularly: raw_encode

# Most promising using lambda: https://github.com/esphome/issues/issues/3857#issuecomment-1591016833
